//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id              String           @id() @default(uuid())
  name            String?
  email           String?          @unique()
  pictureUrl      String?          @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation String?
  status          UserStatus       @default(VERIFIED)
  globalRole      String           @default("USER")
  /// @password
  /// @omit
  password        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt()
  enrollments     Enrollment[]     @relation("user")
  testAttempts    TestAttempt[]    @relation("user")
  aiConversations AIConversation[] @relation("user")
  doubts          Doubt[]          @relation("user")
  doubtReplys     DoubtReply[]     @relation("user")
}

/// @@allow('all', true)
model Course {
  id          String       @id() @default(uuid())
  title       String?
  subject     String?
  examType    String?
  description String?
  level       String?
  contents    Content[]    @relation("course")
  enrollments Enrollment[] @relation("course")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Content {
  id          String   @id() @default(uuid())
  title       String?
  type        String?
  resourceUrl String?
  sequence    Float?
  courseId    String?
  course      Course?  @relation(fields: [courseId], references: [id], name: "course")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Test {
  id             String        @id() @default(uuid())
  title          String?
  examType       String?
  subject        String?
  duration       Float?
  totalQuestions Float?
  questions      Question[]    @relation("test")
  testAttempts   TestAttempt[] @relation("test")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Question {
  id          String   @id() @default(uuid())
  content     String?
  imageUrl    String?
  answer      String?
  explanation String?
  testId      String?
  test        Test?    @relation(fields: [testId], references: [id], name: "test")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Enrollment {
  id         String   @id() @default(uuid())
  progress   String
  enrollDate String
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], name: "user")
  courseId   String?
  course     Course?  @relation(fields: [courseId], references: [id], name: "course")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TestAttempt {
  id          String   @id() @default(uuid())
  score       String?
  completedAt String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  testId      String?
  test        Test?    @relation(fields: [testId], references: [id], name: "test")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model AIConversation {
  id        String   @id() @default(cuid())
  query     String
  response  String
  imageUrl  String?
  timestamp DateTime
  model     String?
  user      User     @relation("user", fields: [userId], references: [id])
  userId    String
}

/// @@allow('all', true)
model Doubt {
  id          String       @id() @default(uuid())
  title       String?
  content     String?
  status      String?
  userId      String?
  user        User?        @relation(fields: [userId], references: [id], name: "user")
  doubtReplys DoubtReply[] @relation("doubt")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model DoubtReply {
  id            String   @id() @default(uuid())
  content       String?
  isAiGenerated Boolean
  doubtId       String?
  doubt         Doubt?   @relation(fields: [doubtId], references: [id], name: "doubt")
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt()
}
